"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultOptions = void 0;
const constants_1 = require("../constants");
/**
 * Validates Optimism hardfork option
 * @param hardfork
 * @returns {boolean}
 */
function isOptimismHardfork(hardfork) {
    if (hardfork === undefined)
        return false;
    return ["bedrock, ecotone"].includes(hardfork);
}
// TODO: Enabled when arbitrum support added
/**
 * Validates Arbitrum hardfork option
 * @param hardfork
 * @returns
 */
// function isArbitrumHardfork(hardfork: string | undefined) {
//  if (hardfork === undefined) return false;
//  return ["arbOS11"].includes(hardfork);
// }
/**
 * Sets default reporter options
 */
function getDefaultOptions(userConfig) {
    // let arbitrumHardfork: ArbitrumHardfork;
    let optimismHardfork;
    const userOptions = userConfig.gasReporter;
    // NB: silently coercing to default if there's a misspelling or option not avail
    if (userOptions) {
        if (userOptions.L2 === "optimism" && !isOptimismHardfork(userOptions.optimismHardfork)) {
            optimismHardfork = constants_1.DEFAULT_OPTIMISM_HARDFORK;
        }
        // TODO: enable when arbitrum support added
        // if (userOptions.L2 === "arbitrum" && !isArbitrumHardfork(userOptions.arbitrumHardfork)) {
        //  arbitrumHardfork = DEFAULT_ARBITRUM_HARDFORK;
        // }
    }
    return {
        // arbitrumHardfork,
        currency: constants_1.DEFAULT_CURRENCY,
        currencyDisplayPrecision: constants_1.DEFAULT_CURRENCY_DISPLAY_PRECISION,
        darkMode: false,
        enabled: true,
        excludeContracts: [],
        excludeAutoGeneratedGetters: false,
        forceTerminalOutput: false,
        includeBytecodeInJSON: false,
        includeIntrinsicGas: true,
        L1: "ethereum",
        noColors: false,
        offline: false,
        optimismHardfork,
        outputJSON: false,
        outputJSONFile: constants_1.DEFAULT_JSON_OUTPUT_FILE,
        reportFormat: constants_1.TABLE_NAME_TERMINAL,
        reportPureAndViewMethods: false,
        rst: false,
        rstTitle: "",
        suppressTerminalOutput: false,
        showMethodSig: false,
        showUncalledMethods: false,
    };
}
exports.getDefaultOptions = getDefaultOptions;
//# sourceMappingURL=options.js.map